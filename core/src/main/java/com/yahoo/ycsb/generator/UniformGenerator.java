/**
 * Copyright (c) 2010 Yahoo! Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you
 * may not use this file except in compliance with the License. You
 * may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License. See accompanying
 * LICENSE file.
 */

package com.yahoo.ycsb.generator;

import java.util.ArrayList;
import java.util.List;
import java.util.Vector;

/**
 * An expression that generates a random integer in the specified range.
 */
public class UniformGenerator extends Generator {

  private UniformIntegerGenerator gen;
  private String laststring;
  private List<String> values;

  /**
   * Creates a generator that will return strings from the specified set
   * uniformly randomly.
   */
  public UniformGenerator(final Vector<String> values) {
    this.values = new ArrayList<String>(values);
    this.laststring = null;
    this.gen = new UniformIntegerGenerator(0, values.size() - 1);
  }

  /**
   * Return the previous string generated by the distribution; e.g., returned
   * from the last nextString() call. Calling lastString() should not advance
   * the distribution or have any side effects. If nextString() has not yet been
   * called, lastString() should return something reasonable.
   */
  @Override
  public String lastString() {
    if (laststring == null) {
      nextString();
    }
    return laststring;
  }

  /**
   * Generate the next string in the distribution.
   */
  @Override
  public String nextString() {
    laststring = values.get(gen.nextInt());
    return laststring;
  }
}
